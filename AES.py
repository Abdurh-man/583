# Rcon[] is 1-based, so the first entry is just a place holder
Rcon = [ 
    0x00000000,
    0x01000000, 0x02000000, 0x04000000, 0x08000000,
    0x10000000, 0x20000000, 0x40000000, 0x80000000,
    0x1B000000, 0x36000000, 0x6C000000, 0xD8000000,
    0xAB000000, 0x4D000000, 0x9A000000, 0x2F000000,
    0x5E000000, 0xBC000000, 0x63000000, 0xC6000000,
    0x97000000, 0x35000000, 0x6A000000, 0xD4000000,
    0xB3000000, 0x7D000000, 0xFA000000, 0xEF000000,
    0xC5000000, 0x91000000, 0x39000000, 0x72000000,
    0xE4000000, 0xD3000000, 0xBD000000, 0x61000000,
    0xC2000000, 0x9F000000, 0x25000000, 0x4A000000,
    0x94000000, 0x33000000, 0x66000000, 0xCC000000,
    0x83000000, 0x1D000000, 0x3A000000, 0x74000000,
    0xE8000000, 0xCB000000, 0x8D000000 ]

Sbox = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

InvSbox = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
]

# ffAdd() - adds two finite fields (see Section 4.1)
# xtime() - multiplies a finite field by x (see Section 4.2.1)
# ffMultiply() - uses xtime to multiply any finite field by any other finite field. (see Section 4.2.1)

def ffAdd(x1, x2):
#     a = format(x1, '0>8b')
#     b = format(x2, '0>8b')
    a = [int(i) for i in "{0:08b}".format(x1)]
    b = [int(i) for i in "{0:08b}".format(x2)]
    result = 0b00000000
    addition = []
    for i in range(len(a)):
        bit =  (a[i]^b[i])
        result |= bit << 7 - i
    return result

#according to the documentation xtime(b) returns xb(x) mod x8+x4+x3+x+1 
def xtime(x):
    temp = x
    x = (x << 1)&(0xff)
    #if leading bit is one 
    if temp & 0x80:  
        x ^= 0x1b 
        #beacuse, we use x^4 + x^3 + x + 1 which is 11011 

    return x

#0x57 0101 0111
#0x13 0001 0011 
def ffMultiply(a, b):
    ans = 0
    while(a != 0 and b != 0):
        if (b & 0x01):
            ans ^= a

        a = xtime(a)
        b >>= 1

    return ans

def subWord(word):
    b1, b2, b3, b4 = ((word & 0xff000000) >> 24), ((word & 0xff0000) >> 16), ((word & 0xff00) >> 8), (word & 0xff)
    state = [b1, b2, b3, b4]
    ret_word = 0
    for byte in state:
        x, y = ((byte & 0xf0) >> 4), (byte & 0xf)
        ret_word = (ret_word << 8) + Sbox[x][y]
    return ret_word
# def subWord(word):
#     x1,y1 = (word>>28)&0x0f, (word>>24)&0x0f
#     x2,y2 = (word>>20)&0x0f, (word>>16)&0x0f
#     x3,y3 = (word>>12)&0x0f, (word>>8)&0x0f
#     x4,y4 = (word>>4)&0x0f, (word>>0)&0x0f

#     sword = 0x00000000
#     s1 = (Sbox[x1][y1])
#     s2 = (Sbox[x2][y2])
#     s3 = (Sbox[x3][y3])
#     s4 = (Sbox[x4][y4])

#     sword |= s1<<28
#     sword |= s2<<16
#     sword |= s3<<8
#     sword |= s4<<0

#     return sword

def rotWord(key):
    low = key >> 24
    key = key & 0x00ffffff
    key = key << 8 | low
    return key


def keyExpansion(key,w, Nk=4, Nr=10):
    temp = ""
    i = 0
    while (i < Nk):
        #          24          16          8          0
        w[i] = (key[4 * i] << 24) | (key[4 * i + 1] << 16) | (key[4 * i + 2] << 8) | (key[4 * i + 3])
        i = i+1
        
    i = Nk
    while (i < 4 * (Nr+1)):
        temp = w[i-1]

        if (i%Nk == 0):
            temp = subWord(rotWord(temp)) ^ Rcon[int(i/Nk)]
        
        elif(Nk > 6 and i%Nk == 4):
            temp = subWord(temp)

        w[i] = w[i-Nk] ^ temp
        i = i + 1

def subByte(state):
    sub = []
    #for index, value in enumerate(arr):

    for i, ivalue in enumerate(state):
        for j, jvalue in enumerate(ivalue):
#           x,y = (state>>4)&0x0f, (state>>0)&0x0f
            state[i][j] = Sbox[i][j]
            x,y = (jvalue>>4)&0x0f, (jvalue>>0)&0x0f
            state[i][j] = Sbox[x][y]

    
def shiftRows(state):
    key = 0x00000000
    for i, ivalues in enumerate(state): 
        key = 0x00000000
        for j, jvalues in enumerate(ivalues):
            val = 0x00000000
            val |= jvalues

            key |= val << (24-(j*8))
            
        for j in range(i):
            key = rotWord(key)
            key = key
        
        state[i][3] = ((key>>0)&0x000000ff)
        state[i][2] = ((key>>8)&0x000000ff)
        state[i][1] = ((key>>16)&0x000000ff)
        state[i][0] = ((key>>24)&0x000000ff)

def mixColumns(state):
    #look at aes documentation page 18
    for i in range(4):
        a = state[0][i]
        b = state[1][i]
        c = state[2][i]
        d = state[3][i]
        s0 = ffMultiply(a, 0x02) ^ ffMultiply(b, 0x03) ^ ffMultiply(c, 0x01) ^ ffMultiply(d, 0x01)
        s1 = ffMultiply(a, 0x01) ^ ffMultiply(b, 0x02) ^ ffMultiply(c, 0x03) ^ ffMultiply(d, 0x01)
        s2 = ffMultiply(a, 0x01) ^ ffMultiply(b, 0x01) ^ ffMultiply(c, 0x02) ^ ffMultiply(d, 0x03)
        s3 = ffMultiply(a, 0x03) ^ ffMultiply(b, 0x01) ^ ffMultiply(c, 0x01) ^ ffMultiply(d, 0x02)

        state[0][i] = (s0)    
        state[1][i] = (s1)    
        state[2][i] = (s2)    
        state[3][i] = (s3)    

def addRoundKey(state,w,Nr=4):
    for i in range(Nr):
        for j in range(Nr):
            state[i][j] = (state[i][j] ^ (w[(4*i)+j])&0x000000ff)

def invSubByte(state):
    sub = []
    #for index, value in enumerate(arr):

    for i, ivalue in enumerate(state):
        for j, jvalue in enumerate(ivalue):
#           x,y = (state>>4)&0x0f, (state>>0)&0x0f
            state[i][j] = (InvSbox[i][j])
            x,y = (jvalue>>4)&0x0f, (jvalue>>0)&0x0f
            state[i][j] = (InvSbox[x][y])

def invShiftRows(state):
    key = 0x00000000
    for i, ivalues in enumerate(state): 
        key = 0x00000000
        for j, jvalues in enumerate(ivalues):
            val = 0x00000000
            val |= jvalues

            key |= val << (24-(j*8))
            
        for j in range(i):
            key = rotWord(key)
            key = key
        
        state[i][0] = ((key>>0)&0x000000ff)
        state[i][3] = ((key>>8)&0x000000ff)
        state[i][2] = ((key>>16)&0x000000ff)
        state[i][1] = ((key>>24)&0x000000ff)

def invMixColumns(state):
    #look at aes documentation page 18
    for i in range(4):
        a = state[0][i]
        b = state[1][i]
        c = state[2][i]
        d = state[3][i]
        s0 = ffMultiply(a, 0x0e) ^ ffMultiply(b, 0x0b) ^ ffMultiply(c, 0x0d) ^ ffMultiply(d, 0x09)
        s1 = ffMultiply(a, 0x09) ^ ffMultiply(b, 0x0e) ^ ffMultiply(c, 0x0b) ^ ffMultiply(d, 0x0d)
        s2 = ffMultiply(a, 0x0d) ^ ffMultiply(b, 0x09) ^ ffMultiply(c, 0x0e) ^ ffMultiply(d, 0x0b)
        s3 = ffMultiply(a, 0x0b) ^ ffMultiply(b, 0x0d) ^ ffMultiply(c, 0x09) ^ ffMultiply(d, 0x0e)

        state[0][i] = (s0)    
        state[1][i] = (s1)    
        state[2][i] = (s2)    
        state[3][i] = (s3)    

def cipher(data_in, data_out,w, Nr=10, Nk=4, Nb=4):
    state = []
    state = data_in

    addRoundKey(state,w)

    for round in range(1,Nr):
        subByte(state) 
        shiftRows(state) 
        mixColumns(state) 
        addRoundKey(state, w)
    subByte(state)
    shiftRows(state)
    addRoundKey(state, w)
    data_out = state 

def decrypt(data_in, data_out,w, Nk = 4, Nr = 10, Nb = 4):
    state = []
    state = data_in

    addRoundKey(state,w)

    for round in range(Nr-1,0,-1):
        invSubByte(state) 
        invShiftRows(state) 
        invMixColumns(state) 
        addRoundKey(state, w)
    subByte(state)
    shiftRows(state)
    addRoundKey(state, w)
    data_out = state 

# data_in = "00112233445566778899aabbccddeeff"
# key = "000102030405060708090a0b0c0d0e0f"
def ALGORITHM(data_in,key,Nk, Nr):
    data_out = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    matrix_in = []
    for i in range(0,len(data_in),2):
        matrix_in.append( "0x" + data_in[i:i+1])

    matrix_in = [int(i,0) for i in matrix_in]
    key_mat = []
    for i in range(0,len(data_in),2):
        key_mat.append( "0x" + data_in[i:i+1])

    key = [int(i,0) for i in key_mat]

    data_in_matrix = [
        [matrix_in[0],matrix_in[4],matrix_in[8],matrix_in[12]],
        [matrix_in[1],matrix_in[5],matrix_in[9],matrix_in[13]],
        [matrix_in[2],matrix_in[6],matrix_in[10],matrix_in[14]],
        [matrix_in[3],matrix_in[7],matrix_in[11],matrix_in[15]]
    ]

    w = [()] * 44
    keyExpansion(key,w,Nk,Nr)
    
    cipher(data_in_matrix, data_out, w, Nk, Nr)
    print(data_out)
    
    decrypt(data_in_matrix, data_out, w, Nk, Nr)
    print(data_out)

def run():
    state = [ 
    [0x19,0xa0,0x9a,0xe9],
    [0x3d,0xf4,0xc6,0xf8],
    [0xe3,0xe2,0x8d,0x48],
    [0xbe,0x2b,0x2a,0x08] ]

    key = [
        0x2b, 0x7e, 0x15, 0x16, 
        0x28, 0xae, 0xd2, 0xa6,
        0xab, 0xf7, 0x15, 0x88, 
        0x09, 0xcf, 0x4f, 0x3c ]

    w = [()] * 44

    expanded = [
        0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c,0xa0fafe17, 0x88542cb1, 0x23a33939, 0x2a6c7605,0xf2c295f2, 0x7a96b943, 0x5935807a, 0x7359f67f,0x3d80477d, 0x4716fe3e, 0x1e237e44, 0x6d7a883b,0xef44a541, 0xa8525b7f, 0xb671253b, 0xdb0bad00,0xd4d1c6f8, 0x7c839d87, 0xcaf2b8bc, 0x11f915bc,0x6d88a37a, 0x110b3efd, 0xdbf98641, 0xca0093fd,0x4e54f70e, 0x5f5fc9f3, 0x84a64fb2, 0x4ea6dc4f,0xead27321, 0xb58dbad2, 0x312bf560, 0x7f8d292f,0xac7766f3, 0x19fadc21, 0x28d12941, 0x575c006e,0xd014f9a8, 0xc9ee2589, 0xe13f0cc8, 0xb6630ca6
    ]
  
    sub = [     
        [0xd4,0xe0,0xb8,0x1e],
        [0x27,0xbf,0xb4,0x41],
        [0x11,0x98,0x5d,0x52],
        [0xae,0xf1,0xe5,0x30] ]
    
    shift  = [   
        [0xd4, 0xe0, 0xb8, 0x1e],                 
        [0xbf, 0xb4, 0x41, 0x27],
        [0x5d, 0x52, 0x11, 0x98],
        [0x30, 0xae, 0xf1, 0xe5]]
    
    mix =    [ 
        [0x04, 0xe0, 0x48, 0x28],
        [0x66, 0xcb, 0xf8, 0x06],
        [0x81, 0x19, 0xd3, 0x26],
        [0xe5, 0x9a, 0x7a, 0x4c] ]

    round = [ 
        [0xa4, 0x68, 0x6b, 0x02],
        [0x9c, 0x9f, 0x5b, 0x6a],
        [0x7f, 0x35, 0xea, 0x50],
        [0xf2, 0x2b, 0x43, 0x49]
    ]

    keyExpansion(key,w,4,10)
    print(w==expanded)

    subByte(state)
    print(state==sub)

    shiftRows(state)
    print(state==shift)

    mixColumns(state)
    print(state==mix)

    addRoundKey(state, w, 4)
    print(state==round)

def test():
    print(hex(ffAdd(0x57,0x83)))
    print(hex(xtime(0x57)))
    print(hex(xtime(0xae)))
    print(hex(xtime(0x47)))
    print(hex(xtime(0x8e)))

    print(hex(ffMultiply(0x57,0x13)))

    print(hex(subWord(0x00102030)))
    print(hex(subWord(0x40506070)))
    print(hex(subWord(0x8090a0b0)))
    print(hex(subWord(0xc0d0e0f0)))
    print("")
    print(hex(rotWord(0x09cf4f3c)))
    print(hex(rotWord(0x2a6c7605)))


    key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
        0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
    w = [()] * 44

    keyExpansion(key,w,4,10)

    print_w = [0 for i in range(44)] 
    for i in range(len(w)):
        print_w[i] = hex(w[i])
    print(print_w)

if __name__ == '__main__':
    test()
    run()